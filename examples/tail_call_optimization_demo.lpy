; Explicit Tail Call Optimization Demo with `recur`
; This file demonstrates LisPy's explicit tail call optimization using the `recur` special form
; Run with: python bin/lispy_interpreter.py examples/tail_call_optimization_demo.lpy

; === SIMPLE TAIL RECURSION WITH RECUR ===

; Countdown function using recur for explicit tail call optimization
(define countdown (fn [n]
  (if (<= n 0)
    n
    (recur (- n 1)))))

; Test countdown with small values
(countdown 5)        ; => 0
(countdown 10)       ; => 0

; Test countdown with large values that would cause stack overflow without recur
(countdown 5000)     ; => 0 (works thanks to recur!)
(countdown 10000)    ; => 0 (still works!)

; === TAIL RECURSIVE FACTORIAL WITH RECUR ===

; Tail-recursive factorial helper using recur
(define factorial-tail (fn [n acc]
  (if (<= n 1)
    acc
    (recur (- n 1) (* n acc)))))

; Wrapper factorial function
(define factorial (fn [n]
  (factorial-tail n 1)))

; Test factorial
(factorial 5)        ; => 120
(factorial 10)       ; => 3628800
(factorial 20)       ; => 2432902008176640000

; Large factorial that would cause stack overflow without recur
(factorial 100)      ; => very large number (works thanks to recur!)

; === COMPARISON: REGULAR RECURSION VS RECUR ===

; Regular (non-tail) recursive factorial - LIMITED by recursion depth
(define factorial-regular (fn [n]
  (if (<= n 1)
    1
    (* n (factorial-regular (- n 1))))))

; This works for small values but hits recursion limit for large ones
(factorial-regular 5)   ; => 120
(factorial-regular 10)  ; => 3628800
; factorial-regular 200 would cause RecursionError due to depth limit

; === RECUR IN CONDITIONAL BRANCHES ===

; Even/odd checker using recur
(define is-even (fn [n]
  (if (= n 0)
    true
    (if (= n 1)
      false
      (recur (- n 2))))))

; Test even/odd
(is-even 4)          ; => true
(is-even 5)          ; => false
(is-even 1000)       ; => true (works with large numbers thanks to recur)
(is-even 9999)       ; => false

; === TAIL RECURSIVE LIST PROCESSING WITH RECUR ===

; Sum all numbers in a vector using recur
(define sum-vector-tail (fn [vec acc]
  (if (empty? vec)
    acc
    (recur (rest vec) (+ acc (first vec))))))

(define sum-vector (fn [vec]
  (sum-vector-tail vec 0)))

; Test vector sum
(sum-vector [1 2 3 4 5])           ; => 15
(sum-vector [10 20 30 40 50])      ; => 150

; === MULTIPLE PARAMETER TAIL RECURSION WITH RECUR ===

; Add two numbers by counting using recur
(define add-by-counting (fn [a b]
  (if (= b 0)
    a
    (recur (+ a 1) (- b 1)))))

; Test addition by counting
(add-by-counting 5 3)    ; => 8
(add-by-counting 10 7)   ; => 17
(add-by-counting 100 1000) ; => 1100 (large values work thanks to recur)

; === FAST FIBONACCI WITH RECUR ===

; Tail-recursive Fibonacci using recur (much faster than naive version)
(define fib-tail (fn [n a b]
  (if (= n 0)
    a
    (recur (- n 1) b (+ a b)))))

(define fib-fast (fn [n] (fib-tail n 0 1)))

; Test fast fibonacci
(fib-fast 10)        ; => 55
(fib-fast 20)        ; => 6765
(fib-fast 100)       ; => very large number (works thanks to recur!)

; Compare with naive fibonacci (don't try large numbers!)
(define fib-naive (fn [n]
  (if (<= n 1)
    n
    (+ (fib-naive (- n 1)) (fib-naive (- n 2))))))

(fib-naive 10)       ; => 55 (but much slower)
; (fib-naive 40)     ; => would be very slow without memoization

; === DEMONSTRATION SUMMARY ===

; Print summary
"=== Explicit Tail Call Optimization Demo Complete ==="
"Functions using 'recur' can handle large inputs without stack overflow!"
"Regular recursion is limited to prevent stack overflow."
"Use 'recur' when you need tail call optimization for deep recursion."

; Key insights:
; 1. recur provides explicit tail call optimization
; 2. recur must be used in tail position (last expression)
; 3. recur must match the function's arity (number of parameters)
; 4. Regular recursion is limited to prevent stack overflow
; 5. Use recur for performance-critical recursive algorithms 