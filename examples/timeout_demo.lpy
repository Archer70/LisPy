;; LisPy Timeout Functions Demo
;; Demonstrates the new timeout and with-timeout functions

(println "=== LisPy Timeout Functions Demo ===")
(println)

;; Basic timeout usage
(println "1. Basic timeout - creates a promise that resolves after delay:")
(define basic-timeout (timeout 1000 "Hello after 1 second"))
(println "Created timeout promise:" basic-timeout)
(println)

;; Timeout with thread-first operator
(println "2. Timeout with promise chaining:")
(define chained-timeout 
  (-> (timeout 500 "Initial value")
      (promise-then (fn [x] (append x " -> processed")))
      (promise-then (fn [x] (append x " -> final")))))
(println "Created chained timeout:" chained-timeout)
(println)

;; with-timeout for fallback behavior
(println "3. with-timeout for graceful fallbacks:")

;; Fast operation - should complete before timeout
(define fast-operation 
  (with-timeout (resolve "Fast result") "Fallback" 1000))
(println "Fast operation with timeout:" fast-operation)

;; Slow operation - should use fallback
(define slow-operation 
  (with-timeout (timeout 2000 "Slow result") "Fallback used!" 500))
(println "Slow operation with timeout:" slow-operation)
(println)

;; Thread-first with timeout (timeout argument last for chaining)
(println "4. Thread-first compatible with-timeout:")
(define api-simulation
  (-> (timeout 300 "API data")
      (with-timeout "Cache data" 200)  ; Timeout is last argument
      (promise-then (fn [data] (append "Processed: " data)))))
(println "API simulation with fallback:" api-simulation)
(println)

;; Racing timeouts for fastest response
(println "5. Racing multiple timeouts:")
(define race-result
  (promise-race (vector
                  (timeout 800 "Slow service")
                  (timeout 200 "Fast service")
                  (timeout 400 "Medium service"))))
(println "Race result:" race-result)
(println)

;; Complex fallback chain
(println "6. Complex fallback chain:")
(define fallback-chain
  (-> (timeout 300 "Primary")
      (with-timeout "Secondary" 150)
      (promise-then (fn [result]
        (if (equal? result "Secondary")
          (timeout 100 "Backup")
          result)))
      (with-timeout "Emergency" 200)))
(println "Fallback chain:" fallback-chain)
(println)

;; Error handling with timeouts
(println "7. Error handling with timeouts:")
(define error-handling
  (-> (reject "Network error")
      (with-timeout "Timeout fallback" 1000)  ; Won't be used - error preserved
      (on-reject (fn [err] "Error handled"))
      (promise-then (fn [result] (append "Final: " result)))))
(println "Error handling result:" error-handling)
(println)

(println "=== Demo Complete ===")
(println "Note: Promises are asynchronous - actual values will resolve over time.")
(println "Use (async (await promise)) to wait for results in interactive sessions.") 