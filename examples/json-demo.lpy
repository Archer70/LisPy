;; JSON Encoding and Decoding Demo
;; This example demonstrates LisPy's built-in JSON functions

(println "=== LisPy JSON Functions Demo ===")
(println)

;; ================================
;; 1. Encoding Primitive Data Types
;; ================================
(println "1. Encoding Primitive Data Types")

;; Numbers become JSON numbers
(define encoded-number (json-encode 42))
(println "Number 42 → " encoded-number)
(println "Type:" (type-of encoded-number))

;; Booleans become JSON booleans
(define encoded-bool (json-encode true))
(println "Boolean true → " encoded-bool)

;; nil becomes JSON null
(define encoded-nil (json-encode nil))
(println "nil → " encoded-nil)

;; Strings become JSON strings
(define encoded-string (json-encode "Hello, World!"))
(println "String → " encoded-string)

(println)

;; ================================
;; 2. Encoding Collections
;; ================================
(println "2. Encoding Collections")

;; Vectors become JSON arrays
(define my-vector [1 2 3 "hello" true])
(define encoded-vector (json-encode my-vector))
(println "Vector [1 2 3 \"hello\" true] → " encoded-vector)

;; Maps become JSON objects
(define my-map {:name "Alice" :age 30 :active true})
(define encoded-map (json-encode my-map))
(println "Map {:name \"Alice\" :age 30 :active true} → " encoded-map)

(println)

;; ================================
;; 3. Complex Nested Structures
;; ================================
(println "3. Complex Nested Structures")

(define complex-data
  {:users [{:name "Alice"
            :age 30
            :hobbies ["reading" "coding"]
            :settings {:notifications true
                      :theme "dark"}}
           {:name "Bob"
            :age 25
            :hobbies ["gaming" "music"]
            :settings {:notifications false
                      :theme "light"}}]
   :metadata {:version "1.0"
             :created "2024-01-01"
             :active true}})

(define encoded-complex (json-encode complex-data))
(println "Complex nested structure encoded:")
(println encoded-complex)

(println)

;; ================================
;; 4. Decoding JSON Strings
;; ================================
(println "4. Decoding JSON Strings")

;; Decode primitives
(define decoded-number (json-decode "42"))
(println "\"42\" decoded → " decoded-number " (type: " (type-of decoded-number) ")")

(define decoded-bool (json-decode "true"))
(println "\"true\" decoded → " decoded-bool " (type: " (type-of decoded-bool) ")")

(define decoded-null (json-decode "null"))
(println "\"null\" decoded → " decoded-null " (type: " (type-of decoded-null) ")")

;; Decode arrays (become vectors)
(define decoded-array (json-decode "[1, 2, 3, \"hello\"]"))
(println "\"[1, 2, 3, \\\"hello\\\"]\" decoded → " decoded-array)
(println "First element: " (first decoded-array))
(println "Is vector?: " (is-vector? decoded-array))

;; Decode objects (become maps with keyword keys)
(define decoded-object (json-decode "{\"name\": \"Alice\", \"age\": 30}"))
(println "Object decoded → " decoded-object)
(println "Name: " (get decoded-object :name))
(println "Age: " (get decoded-object :age))

(println)

;; ================================
;; 5. Round-Trip Conversion
;; ================================
(println "5. Round-Trip Conversion")

(define original {:message "Hello" :numbers [1 2 3] :active true})
(println "Original: " original)

;; Encode to JSON
(define json-string (json-encode original))
(println "JSON: " json-string)

;; Decode back to LisPy
(define restored (json-decode json-string))
(println "Restored: " restored)

;; Verify data integrity
(println "Message matches?: " (equal? (get original :message) (get restored :message)))
(println "Numbers match?: " (equal? (get original :numbers) (get restored :numbers)))
(println "Active matches?: " (equal? (get original :active) (get restored :active)))

(println)

;; ================================
;; 6. Working with HTTP Responses
;; ================================
(println "6. Working with HTTP Responses")

;; Simulate an HTTP response (normally you'd get this from http-get)
(define simulated-response
  {:status 200
   :body "{\"users\": [{\"id\": 1, \"name\": \"Alice\"}, {\"id\": 2, \"name\": \"Bob\"}], \"total\": 2}"})

;; Parse the JSON body
(define parsed-body (json-decode (get simulated-response :body)))
(println "Parsed API response:")
(println "Total users: " (get parsed-body :total))
(println "First user: " (first (get parsed-body :users)))
(println "First user name: " (get (first (get parsed-body :users)) :name))

(println)

;; ================================
;; 7. Error Handling
;; ================================
(println "7. Error Handling")

;; Try to decode invalid JSON
(try
  (json-decode "{invalid json}")
  (catch JSONDecodeError e
    (println "Caught JSON decode error: " e)))

;; Try to call with wrong arity
(try
  (json-encode 1 2 3)
  (catch JSONEncodeError e
    (println "Caught JSON encode error: " e)))

(println)

;; ================================
;; 8. Performance & File Operations
;; ================================
(println "8. JSON with File Operations")

;; Create some data
(define config-data
  {:database {:host "localhost"
             :port 5432
             :name "myapp"}
   :cache {:enabled true
          :ttl 3600}
   :features [:auth :notifications :analytics]})

;; Convert to JSON and write to file
(define config-json (json-encode config-data))
(spit "config.json" config-json)
(println "Wrote config to config.json")

;; Read back and parse
(define loaded-config-json (slurp "config.json"))
(define loaded-config (json-decode loaded-config-json))
(println "Loaded config database host: " (get (get loaded-config :database) :host))
(println "Loaded config features: " (get loaded-config :features))

(println)
(println "=== Demo Complete ===")
(println "JSON functions provide seamless interoperability with web APIs,")
(println "configuration files, and any system that uses JSON data exchange.") 