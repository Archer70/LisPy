; Modulo Function Demonstration
; This file showcases the modulo (%) function in LisPy
; Run with: python bin/lispy_interpreter.py examples/modulo-demo.lpy

(println "=== LisPy Modulo Function Demo ===")
(println)

; === BASIC MODULO OPERATIONS ===
(println "Basic Modulo Operations:")
(println "10 % 3 =" (% 10 3))      ; => 1
(println "15 % 4 =" (% 15 4))      ; => 3
(println "20 % 6 =" (% 20 6))      ; => 2
(println "7 % 7 =" (% 7 7))        ; => 0 (perfect division)
(println)

; === EVEN/ODD DETECTION ===
(println "Even/Odd Detection:")
(define even? (fn [n] (= (% n 2) 0)))
(define odd? (fn [n] (= (% n 2) 1)))

(println "8 is even:" (even? 8))    ; => true
(println "8 is odd:" (odd? 8))      ; => false
(println "9 is even:" (even? 9))    ; => false
(println "9 is odd:" (odd? 9))      ; => true
(println "100 is even:" (even? 100)) ; => true
(println "101 is odd:" (odd? 101))   ; => true
(println)

; === MULTIPLE ARGUMENTS ===
(println "Multiple Arguments (left-to-right evaluation):")
(println "20 % 6 % 3 =" (% 20 6 3))    ; (% (% 20 6) 3) = (% 2 3) = 2
(println "100 % 7 % 3 =" (% 100 7 3))  ; (% (% 100 7) 3) = (% 2 3) = 2
(println "50 % 8 % 5 % 2 =" (% 50 8 5 2)) ; => 0
(println)

; === FLOATING POINT MODULO ===
(println "Floating Point Modulo:")
(println "10.5 % 3 =" (% 10.5 3))     ; => 1.5
(println "15.0 % 4 =" (% 15.0 4))     ; => 3.0
(println "7.8 % 2.5 ≈" (% 7.8 2.5))   ; ≈ 0.3
(println)

; === NEGATIVE NUMBERS ===
(println "Modulo with Negative Numbers:")
(println "-10 % 3 =" (% -10 3))       ; => 2 (Python's modulo behavior)
(println "10 % -3 =" (% 10 -3))       ; => -2
(println "-10 % -3 =" (% -10 -3))     ; => -1
(println)

; === PRACTICAL APPLICATIONS ===
(println "Practical Applications:")

; Cycle through values (useful for circular arrays, colors, etc.)
(define cycle-value (fn [index max-value]
  (% index max-value)))

(println "Cycling through 0-4:")
(println "cycle(0, 5) =" (cycle-value 0 5))   ; => 0
(println "cycle(3, 5) =" (cycle-value 3 5))   ; => 3
(println "cycle(7, 5) =" (cycle-value 7 5))   ; => 2 (wraps around)
(println "cycle(12, 5) =" (cycle-value 12 5)) ; => 2
(println)

; Check if a number is divisible by another
(define divisible-by? (fn [n divisor]
  (= (% n divisor) 0)))

(println "Divisibility Tests:")
(println "15 divisible by 3:" (divisible-by? 15 3))  ; => true
(println "15 divisible by 4:" (divisible-by? 15 4))  ; => false
(println "100 divisible by 10:" (divisible-by? 100 10)) ; => true
(println)

; Find last digit of a number
(define last-digit (fn [n] (% n 10)))

(println "Last Digits:")
(println "last digit of 12345:" (last-digit 12345))  ; => 5
(println "last digit of 987:" (last-digit 987))      ; => 7
(println "last digit of 100:" (last-digit 100))      ; => 0
(println)

; === ADVANCED PATTERNS ===
(println "Advanced Patterns:")

; Check if year is leap year (simplified)
(define leap-year? (fn [year]
  (if (= (% year 400) 0)
    true
    (if (= (% year 100) 0)
      false
      (= (% year 4) 0)))))

(println "Leap Year Tests:")
(println "2020 is leap year:" (leap-year? 2020))  ; => true
(println "2021 is leap year:" (leap-year? 2021))  ; => false
(println "1900 is leap year:" (leap-year? 1900))  ; => false
(println "2000 is leap year:" (leap-year? 2000))  ; => true
(println)

; Generate repeating pattern
(define pattern-value (fn [index pattern-length]
  (% index pattern-length)))

(println "Pattern Generation (0,1,2,0,1,2,...):")
(println "pattern(0, 3) =" (pattern-value 0 3))   ; => 0
(println "pattern(1, 3) =" (pattern-value 1 3))   ; => 1
(println "pattern(2, 3) =" (pattern-value 2 3))   ; => 2
(println "pattern(3, 3) =" (pattern-value 3 3))   ; => 0 (repeats)
(println "pattern(7, 3) =" (pattern-value 7 3))   ; => 1
(println)

; === FUNCTIONAL PROGRAMMING WITH MODULO ===
(println "Functional Programming Examples:")

; Filter even numbers from a list
(define filter-even (fn [lst]
  (if (empty? lst)
    []
    (if (even? (first lst))
      (cons (first lst) (filter-even (rest lst)))
      (filter-even (rest lst))))))

(define numbers [1 2 3 4 5 6 7 8 9 10])
(println "Original list:" numbers)
(println "Even numbers:" (filter-even numbers))
(println)

; Count multiples of 3 in a list
(define count-multiples-of-3 (fn [lst count]
  (if (empty? lst)
    count
    (if (= (% (first lst) 3) 0)
      (count-multiples-of-3 (rest lst) (+ count 1))
      (count-multiples-of-3 (rest lst) count)))))

(define test-list [3 5 6 9 10 12 15 18 20])
(println "List:" test-list)
(println "Multiples of 3:" (count-multiples-of-3 test-list 0))
(println)

; === PERFORMANCE WITH LARGE NUMBERS ===
(println "Performance with Large Numbers:")
(println "1000000 % 7 =" (% 1000000 7))
(println "999999 % 1000 =" (% 999999 1000))
(println "123456789 % 987654 =" (% 123456789 987654))
(println)

(println "=== Modulo Function Demo Complete ===")
(println "The modulo operator (%) is essential for:")
(println "• Even/odd detection")
(println "• Cycling through values")
(println "• Divisibility testing")
(println "• Pattern generation")
(println "• Mathematical algorithms")
(println "• Functional programming patterns") 