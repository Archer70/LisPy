; Async Programming Examples in LisPy
; Demonstrates promises, async/await, and async functions

; === BASIC PROMISES ===
; Creating a promise that resolves after some computation
(define slow-calculation 
  (promise (fn [] 
    ; Simulate some work (in real code this might be I/O, network, etc.)
    (+ 42 (* 6 7)))))

; Promises can be awaited in async contexts
(async 
  (let [result (await slow-calculation)]
    (println "Starting async calculation...")
    (println "Calculation result:" result)))

; === IMMEDIATE RESOLUTION/REJECTION ===
; Sometimes you want to create already-resolved promises
(define immediate-value (resolve "Hello, Async World!"))
(define immediate-error (reject "Something went wrong!"))

; Demonstrate immediate promises
(async
  (let [value (await immediate-value)]
    (println "Immediate value:" value)
    ; Note: In real code you'd use try/catch for error handling
    ; For now, we'll just show the promise structure
    (println "Error promise created (not awaited to avoid exception)")))

; === ASYNC FUNCTIONS ===
; Define async functions that return promises
(defn-async fetch-user-data [user-id]
  (let [_ (println "Fetching user data for ID:" user-id)]
    ; Simulate network delay and return mock data
    (append "User-" (str user-id) "-Data")))

; Define async function that calls another async function
(defn-async process-users [user-ids]
  (let [_ (println "Processing users:" user-ids)
        results []
        _ (println "Fetched user data for all users")]
    (append "Processed-" (str (count user-ids)) "-users")))

; === PRACTICAL ASYNC EXAMPLE ===
; Simulate a real-world async workflow
(defn-async calculate-fibonacci-async [n]
  (let [_ (println "Calculating fibonacci(" n ") asynchronously...")
        ; Tail-recursive fibonacci (same as sync version but wrapped in async)
        fib-tail (fn [n a b]
          (if (= n 0)
            a
            (recur (- n 1) b (+ a b))))]
    (fib-tail n 0 1)))

(defn-async batch-fibonacci [numbers]
  (let [_ (println "Calculating fibonacci for batch:" numbers)
        ; Simulate processing multiple numbers
        ; In a real async system, these could run in parallel
        results []
        _ (println "Batch fibonacci calculation complete")]
    results))

; === ASYNC WORKFLOWS ===
; Demonstrate complex async workflows
(async
  (let [_ (println "=== Starting Complex Async Workflow ===")
        ; Step 1: Fetch some data
        user-data (await (fetch-user-data "123"))
        _ (println "Step 1 complete:" user-data)
        ; Step 2: Process data
        processed (await (process-users ["123" "456" "789"]))
        _ (println "Step 2 complete:" processed)
        ; Step 3: Calculate some values
        fib-result (await (calculate-fibonacci-async 10))
        _ (println "Step 3 complete - Fibonacci(10):" fib-result)
        ; Step 4: Batch processing
        batch-result (await (batch-fibonacci [5 10 15]))
        _ (println "Step 4 complete:" batch-result)
        _ (println "=== Async Workflow Complete ===")]
    "Workflow finished successfully"))

; === ERROR HANDLING PATTERNS ===
; Demonstrate error handling with promises
(defn-async risky-operation [should-fail]
  (let [_ (println "Running risky operation, fail:" should-fail)]
    (if should-fail
      (throw "Operation failed!")
      "Operation succeeded!")))

; === CHAINING AND COMPOSITION ===
; Show how async operations can be chained
(async
  (let [_ (println "=== Demonstrating Async Chaining ===")
        ; Chain multiple async operations
        step1 (await (resolve "Initial value"))
        _ (println "Step 1:" step1)
        step2 (await (fetch-user-data "chained"))
        _ (println "Step 2:" step2)
        step3 (await (calculate-fibonacci-async 7))
        _ (println "Step 3 - Fibonacci(7):" step3)
        _ (println "=== Chaining Complete ===")]
    "All steps completed"))

; === EDUCATIONAL EXAMPLES ===
; Show the difference between sync and async versions

; Synchronous version
(define sync-work (fn [x]
  (let [_ (println "Sync work with" x)]
    (* x x))))

; Asynchronous version
(defn-async async-work [x]
  (let [_ (println "Async work with" x)]
    (* x x)))

; Compare usage
(async
  (let [_ (println "=== Sync vs Async Comparison ===")
        ; Sync - direct call
        sync-result (sync-work 5)
        _ (println "Sync result:" sync-result)
        ; Async - must await
        async-result (await (async-work 5))
        _ (println "Async result:" async-result)
        _ (println "Both give same result, but async can run concurrently")]
    "Comparison complete"))

; === PERFORMANCE CONSIDERATIONS ===
; Show when async is beneficial vs overhead
(async
  (let [_ (println "=== Performance Notes ===")
        _ (println "Async is beneficial when:")
        _ (println "1. I/O operations (file, network, database)")
        _ (println "2. Long-running computations that can be parallelized")
        _ (println "3. Operations that can be interleaved")
        _ (println "")
        _ (println "Async has overhead for simple, fast operations")
        _ (println "Use regular functions for quick computations")]
    "Performance notes displayed"))

; === PROMISE COMBINATORS ===
; Demonstrate promise-all for coordinating multiple async operations
(async
  (let [_ (println "")
        _ (println "=== Promise Combinators ===")
        
        ; Create multiple async operations
        promises (vector
                   (fetch-user-data "user1")
                   (fetch-user-data "user2") 
                   (calculate-fibonacci-async 8))
        
        _ (println "Starting multiple async operations in parallel...")
        
        ; Wait for all to complete
        results (await (promise-all promises))
        _ (println "All operations completed!")
        _ (println "Results:" results)
        
        ; Show how promise-all maintains order
        _ (println "")
        _ (println "Promise-all maintains order of results:")
        ordered-promises (vector (resolve "first") (resolve "second") (resolve "third"))
        ordered-results (await (promise-all ordered-promises))
        _ (println "Ordered results:" ordered-results)
        
        ; === PROMISE-RACE EXAMPLES ===
        _ (println "")
        _ (println "=== Promise Race Examples ===")
        _ (println "Promise-race: First to settle (resolve or reject) wins")
        
        ; Example 1: Racing between fast and slow operations
        _ (println "")
        _ (println "1. Racing fast vs slow operations:")
        race-result1 (await (promise-race (vector 
                                           (delay 100 "fast-operation")
                                           (delay 500 "slow-operation"))))
        _ (println "   Winner:" race-result1)
        
        ; Example 2: Timeout pattern - very common use case
        _ (println "")
        _ (println "2. Timeout pattern (operation vs timeout):")
        race-result2 (await (promise-race (vector
                                          (delay 200 "data-fetched")
                                          (delay 1000 "timeout"))))
        _ (println "   Result within timeout:" race-result2)
        
        ; Example 3: Immediate vs delayed
        _ (println "")
        _ (println "3. Immediate vs delayed:")
        race-result3 (await (promise-race (vector
                                          (resolve "immediate")
                                          (delay 300 "delayed"))))
        _ (println "   Immediate wins:" race-result3)
        
        ; Example 4: Multiple fibonacci calculations - first to finish
        _ (println "")
        _ (println "4. Racing multiple calculations (first to complete):")
        calc-race (await (promise-race (vector
                                       (calculate-fibonacci-async 5)
                                       (calculate-fibonacci-async 6)
                                       (calculate-fibonacci-async 7))))
        _ (println "   First calculation result:" calc-race)
        
        ; === PROMISE-ANY EXAMPLES ===
        _ (println "")
        _ (println "=== Promise Any Examples ===")
        _ (println "Promise-any: First to resolve wins (ignores rejections)")
        
        ; Example 1: Fallback pattern - first success wins
        _ (println "")
        _ (println "1. Fallback pattern (ignores failures):")
        fallback-result (await (promise-any (vector
                                            (reject "primary-failed")
                                            (resolve "backup-success")
                                            (reject "tertiary-failed"))))
        _ (println "   Successful fallback:" fallback-result)
        
        ; Example 2: API endpoint fallback simulation
        _ (println "")
        _ (println "2. API endpoint fallback:")
        api-result (await (promise-any (vector
                                       (reject "api-1-down")
                                       (delay 150 "api-2-data")
                                       (delay 300 "api-3-data"))))
        _ (println "   First successful API:" api-result)
        
        ; Example 3: Immediate success beats delayed success
        _ (println "")
        _ (println "3. Immediate vs delayed success:")
        immediate-result (await (promise-any (vector
                                             (reject "error")
                                             (resolve "immediate-success")
                                             (delay 500 "delayed-success"))))
        _ (println "   Immediate success:" immediate-result)
        
        ; Example 4: Multiple data sources - first to succeed
        _ (println "")
        _ (println "4. Multiple data sources (first to provide data):")
        data-result (await (promise-any (vector
                                        (reject "cache-miss")
                                        (delay 100 "database-data")
                                        (delay 200 "api-data"))))
        _ (println "   First data source:" data-result)
        
        ; === PROMISE-ALL-SETTLED EXAMPLES ===
        _ (println "")
        _ (println "=== Promise All Settled Examples ===")
        _ (println "Promise-all-settled: Wait for all, never reject, return status objects")
        
        ; Example 1: Mixed success and failure
        _ (println "")
        _ (println "1. Mixed success and failure:")
        mixed-results (await (promise-all-settled (vector
                                                   (resolve "success1")
                                                   (reject "error1")
                                                   (resolve "success2")
                                                   (reject "error2"))))
        _ (println (append "   Total results: " (str (count mixed-results))))
        _ (println (append "   First result: " (get (first mixed-results) ':status) " - " (str (get (first mixed-results) ':value))))
        _ (println (append "   Second result: " (get (nth mixed-results 1) ':status) " - " (get (nth mixed-results 1) ':reason)))
        
        ; Example 2: All successful operations
        _ (println "")
        _ (println "2. All successful operations:")
        success-results (await (promise-all-settled (vector
                                                     (resolve "data-a")
                                                     (resolve "data-b")
                                                     (resolve "data-c"))))
        successful-count (count (filter success-results (fn [r] (equal? (get r ':status) "fulfilled"))))
        _ (println (append "   Successful operations: " (str successful-count) "/" (str (count success-results))))
        
        ; Example 3: Graceful degradation pattern
        _ (println "")
        _ (println "3. Graceful degradation (continue despite failures):")
        service-results (await (promise-all-settled (vector
                                                     (reject "service-1-down")
                                                     (delay 50 "service-2-ok")
                                                     (reject "service-3-timeout")
                                                     (delay 80 "service-4-ok"))))
        working-services (filter service-results (fn [r] (equal? (get r ':status) "fulfilled")))
        _ (println (append "   Working services: " (str (count working-services)) "/" (str (count service-results))))
        
        ; Example 4: Comprehensive error reporting
        _ (println "")
        _ (println "4. Comprehensive error reporting:")
        batch-results (await (promise-all-settled (vector
                                                   (resolve "task-1-complete")
                                                   (reject "task-2-failed")
                                                   (resolve "task-3-complete"))))
        failed-tasks (filter batch-results (fn [r] (equal? (get r ':status) "rejected")))
        _ (println (append "   Failed tasks: " (str (count failed-tasks))))]
    "Promise combinators demo complete"))

; === FINAL DEMONSTRATION ===
; Put it all together in a comprehensive example
(async
  (let [_ (println "")
        _ (println "=== FINAL ASYNC DEMONSTRATION ===")
        _ (println "This example shows a complete async workflow")
        ; Simulate a real application workflow
        _ (println "1. Starting application...")
        app-data (await (resolve "Application initialized"))
        _ (println "   " app-data)
        _ (println "2. Loading user data...")
        users (await (fetch-user-data "demo-user"))
        _ (println "   " users)
        _ (println "3. Processing calculations...")
        calculation (await (calculate-fibonacci-async 12))
        _ (println "   Fibonacci(12) =" calculation)
        _ (println "4. Batch operations with promise-all...")
        batch-promises (vector
                         (calculate-fibonacci-async 5)
                         (calculate-fibonacci-async 6)
                         (calculate-fibonacci-async 7))
        batch-results (await (promise-all batch-promises))
        _ (println "   Batch fibonacci results:" batch-results)
        _ (println "5. Finalizing...")
        final-result (await (resolve "All operations complete!"))
        _ (println "   " final-result)
        _ (println "")
        _ (println "🎉 Async demonstration finished successfully!")
        _ (println "")
        _ (println "Key takeaways:")
        _ (println "- Use 'promise' to create async operations")
        _ (println "- Use 'async' to create async contexts")
        _ (println "- Use 'await' to wait for promises")
        _ (println "- Use 'defn-async' to define async functions")
        _ (println "- Use 'promise-all' to coordinate multiple async operations")
        _ (println "- Use 'promise-race' for timeouts and first-wins scenarios")
        _ (println "- Use 'promise-any' for fallback patterns and resilient operations")
        _ (println "- Use 'promise-all-settled' for comprehensive results and graceful degradation")
        _ (println "- Use 'delay' for timed operations and testing")
        _ (println "- Async enables concurrent, non-blocking operations")]
    "Demo complete")) 